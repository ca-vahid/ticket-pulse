// Ticket Pulse - FreshService Real-Time Dashboard
// Database Schema for PostgreSQL

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Technician {
  id              Int       @id @default(autoincrement())
  freshserviceId  BigInt    @unique @map("freshservice_id")
  name            String    @db.VarChar(255)
  email           String?   @db.VarChar(255)
  photoUrl        String?   @db.Text @map("photo_url") // Azure AD profile photo URL or base64 data
  timezone        String    @default("America/Los_Angeles") @db.VarChar(50)
  location        String?   @db.VarChar(100)
  workspaceId     BigInt?   @map("workspace_id") // FreshService workspace ID
  isActive        Boolean   @default(true) @map("is_active")
  photoSyncedAt   DateTime? @map("photo_synced_at") // Last time photo was fetched from Azure AD
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  tickets         Ticket[]

  @@map("technicians")
  @@index([freshserviceId])
  @@index([workspaceId])
  @@index([email])
}

model Requester {
  id                Int       @id @default(autoincrement())
  freshserviceId    BigInt    @unique @map("freshservice_id")
  name              String    @db.VarChar(255)
  email             String?   @db.VarChar(255)
  phone             String?   @db.VarChar(50)
  mobile            String?   @db.VarChar(50)
  department        String?   @db.VarChar(255)
  jobTitle          String?   @db.VarChar(255) @map("job_title")
  timeZone          String?   @db.VarChar(100) @map("time_zone")
  language          String?   @db.VarChar(50)
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  tickets           Ticket[]

  @@map("requesters")
  @@index([freshserviceId])
  @@index([email])
}

model Ticket {
  id                    Int       @id @default(autoincrement())
  freshserviceTicketId  BigInt    @unique @map("freshservice_ticket_id")
  subject               String?   @db.Text
  description           String?   @db.Text
  descriptionText       String?   @db.Text @map("description_text") // Plain text version
  status                String    @db.VarChar(50) // open, pending, resolved, closed
  priority              Int       @default(3) // 1=Urgent, 2=High, 3=Medium, 4=Low

  // Relationships
  assignedTechId        Int?      @map("assigned_tech_id")
  assignedTech          Technician? @relation(fields: [assignedTechId], references: [id])

  // Requester relationship
  requesterId           Int?      @map("requester_id") // Internal DB ID
  requester             Requester? @relation(fields: [requesterId], references: [id])
  requesterFreshserviceId BigInt? @map("requester_freshservice_id") // FreshService requester ID (for mapping)

  // Timestamps
  createdAt             DateTime  @map("created_at")
  assignedAt            DateTime? @map("assigned_at")
  resolvedAt            DateTime? @map("resolved_at")
  closedAt              DateTime? @map("closed_at")
  dueBy                 DateTime? @map("due_by")
  frDueBy               DateTime? @map("fr_due_by") // First response due by
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Assignment tracking
  isSelfPicked          Boolean   @default(false) @map("is_self_picked")
  assignedBy            String?   @db.VarChar(255) @map("assigned_by") // Name or ID

  // Additional metadata
  source                Int?      // 1=Email, 2=Portal, 3=Phone, etc.
  category              String?   @db.VarChar(255)
  subCategory           String?   @db.VarChar(255) @map("sub_category")
  ticketCategory        String?   @db.VarChar(100) @map("ticket_category") // Custom field: security (e.g., BST, GIS, etc.)
  department            String?   @db.VarChar(255)
  isEscalated           Boolean?  @default(false) @map("is_escalated")

  // Time tracking (from FreshService stats)
  timeSpentMinutes      Int?      @map("time_spent_minutes") // Total time spent in minutes (requires time_entries API)
  billableMinutes       Int?      @map("billable_minutes")   // Billable time in minutes (requires time_entries API)
  nonBillableMinutes    Int?      @map("non_billable_minutes") // Non-billable time in minutes (requires time_entries API)
  resolutionTimeSeconds Int?      @map("resolution_time_seconds") // Time from creation to resolution (from stats field)
  firstAssignedAt       DateTime? @map("first_assigned_at") // When ticket was first assigned (from activities API)

  // Workspace filtering
  workspaceName         String?   @db.VarChar(100) @map("workspace_name")

  // Computed fields (handled in application logic)
  // isToday: computed based on createdAt and PST timezone
  // timeToResolve: computed as resolvedAt - createdAt
  // timeToFirstResponse: computed from activities
  // timeToClose: computed as closedAt - createdAt

  @@map("tickets")
  @@index([assignedTechId])
  @@index([createdAt])
  @@index([status])
  @@index([workspaceName])
  @@index([requesterId])
}

model TicketActivity {
  id            Int       @id @default(autoincrement())
  ticketId      Int       @map("ticket_id")
  activityType  String    @db.VarChar(50) // assigned, status_changed, resolved, picked
  performedBy   String    @db.VarChar(255) @map("performed_by")
  performedAt   DateTime  @map("performed_at")
  details       Json?     // Store additional context as JSON

  @@map("ticket_activities")
  @@index([ticketId])
  @@index([performedAt])
}

model AppSettings {
  id              Int       @id @default(autoincrement())
  key             String    @unique @db.VarChar(100)
  value           String    @db.Text
  description     String?   @db.Text
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("app_settings")
}

model SyncLog {
  id              Int       @id @default(autoincrement())
  syncType        String    @db.VarChar(50) // tickets, technicians
  status          String    @db.VarChar(20) // success, error, partial
  recordsProcessed Int      @default(0) @map("records_processed")
  errorMessage    String?   @db.Text @map("error_message")
  startedAt       DateTime  @default(now()) @map("started_at")
  completedAt     DateTime? @map("completed_at")

  @@map("sync_logs")
  @@index([startedAt])
}
